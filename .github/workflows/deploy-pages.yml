name: Deploy to GitHub Pages

on:
  # Only runs when manual or README files change
  push:
    branches: [ main ]
    paths:
      - 'manual/**'
      - 'README.md'
      - '.github/workflows/deploy-pages.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Cleanup old deployments first
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write

    steps:
      - name: Cleanup all old deployments
        uses: aetherinox/gh-action-delete-deploy-env@3.1.0
        with:
          # GitHub token with deployments:write permission
          token: ${{ secrets.GITHUB_TOKEN }}

          # Environment to clean up (github-pages)
          environment: github-pages

          # Delete ALL deployments
          limit: 5

          # Delete deployments but keep the environment
          onlyRemoveDeployments: true

          # Delay to avoid rate limits (in milliseconds)
          delay: 300

      - name: Cleanup summary
        run: |
          echo "🧹 All old deployments cleaned up!"
          echo "🚀 Ready for fresh deployment"

  # Build job (runs after cleanup)
  build:
    runs-on: ubuntu-latest
    needs: cleanup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Generate Jekyll site files (temporary)
        run: |
          # Create Jekyll configuration
          cat > _config.yml << 'EOF'
          # GitHub Pages Configuration for MidiEditor

          # Site settings
          title: MidiEditor
          description: A free software providing an interface to edit, record, and play midi data
          url: "${{ steps.pages.outputs.base_url }}"
          baseurl: "${{ steps.pages.outputs.base_path }}"

          # Theme - Chirpy (modern, feature-rich theme)
          theme: jekyll-theme-chirpy

          # Build settings
          markdown: kramdown
          highlighter: rouge
          kramdown:
            input: GFM
            syntax_highlighter: rouge

          # Chirpy theme plugins (matching gemspec)
          plugins:
            - jekyll-paginate
            - jekyll-seo-tag
            - jekyll-archives
            - jekyll-sitemap
            - jekyll-include-cache
            - jekyll-feed
            - jekyll-github-metadata

          # Chirpy theme settings
          lang: en
          timezone: UTC

          # Site avatar/icon (no custom CSS)
          avatar: /midieditor.ico

          # Collections configuration (required for tabs)
          collections:
            tabs:
              output: true
              sort_by: order

          # Default settings
          defaults:
            - scope:
                path: ""
                type: posts
              values:
                layout: post
                comments: true
                toc: true
                permalink: /posts/:title/
            - scope:
                path: _drafts
              values:
                comments: false
            - scope:
                path: ""
                type: tabs
              values:
                layout: page
                permalink: /:title/

          # Exclude files from processing
          exclude:
            - .github/
            - build/
            - packaging/
            - run_environment/
            - scripts/
            - src/
            - "*.pro"
            - "*.qrc"
            - "*.rc"
            - "*.icns"
            - xmake.lua
            - CONTRIBUTORS
            - LICENSE
            - Gemfile
            - Gemfile.lock
            - vendor/
            - manual/index.html

          # Include manual directory but exclude its index
          include:
            - manual/
          EOF

          # Create Chirpy contact data for sidebar social icons
          mkdir -p _data
          cat > _data/contact.yml <<- 'EOF'
          # Sidebar contact icons (Chirpy)
          # See: https://github.com/cotes2020/jekyll-theme-chirpy/blob/master/_data/contact.yml
          - type: github-repo
            icon: "fab fa-github"
            url: "https://github.com/Meowchestra/MidiEditor"
          - type: ko-fi
            icon: "fas fa-coffee"
            url: "https://ko-fi.com/meowchestra"
          EOF

          # Create Gemfile with latest Jekyll
          cat > Gemfile << 'EOF'
          source "https://rubygems.org"

          # Latest Jekyll
          gem "jekyll", "~> 4.4.1"
          gem "jekyll-theme-chirpy", "~> 7.3", ">= 7.3.1"

          # Chirpy theme plugins (matching gemspec dependencies)
          group :jekyll_plugins do
            # Core Chirpy dependencies (from gemspec)
            gem "jekyll-paginate", "~> 1.1"
            gem "jekyll-seo-tag", "~> 2.8"
            gem "jekyll-archives", "~> 2.3"
            gem "jekyll-sitemap", "~> 1.4"
            gem "jekyll-include-cache", "~> 0.2"
            # Optional additional plugins
            gem "jekyll-feed", "~> 0.17.0"
            gem "jekyll-github-metadata", "~> 2.16", ">= 2.16.1"
          end

          # Platform-specific gems
          platforms :windows, :jruby do
            gem "tzinfo", "~> 2.0"
            gem "tzinfo-data", "~> 1.2025", ">= 1.2025.2"
          end

          # Development server and performance
          gem "webrick", "~> 1.9", ">= 1.9.1"
          gem "kramdown-parser-gfm", "~> 1.1"

          # Fix Faraday v2.0+ compatibilitys
          gem "faraday-retry", "~> 2.3", ">= 2.3.2"

          # Windows/JRuby compatibility
          gem "wdm", "~> 0.2.0", :platforms => [:windows]
          gem "http_parser.rb", "~> 0.8.0", :platforms => [:jruby]
          EOF

          # Create homepage from README with cleaned content (About tab)

          # Create index.md as the homepage with README content
          cat > index.md << 'EOF'
          ---
          layout: page
          ---

          EOF
          # Add README content to the homepage
          echo "🔧 Adding README content to homepage..."
          if [ -f "README.md" ]; then
            echo "📄 README.md found, adding content..."
            tail -n +2 README.md | sed '/^<img.*midieditor\.ico/d' >> index.md
            echo "✅ Homepage created with README content"
            echo "📝 First few lines of homepage:"
            head -10 index.md
          else
            echo "❌ README.md not found!"
            ls -la
          fi

          # Create Chirpy tabs: Manual as the only additional tab
          mkdir -p _tabs
          # Create _tabs directory and Manual tab
          mkdir -p _tabs
          cat > _tabs/manual.md << 'EOF'
          ---
          title: Manual
          icon: fas fa-book
          order: 1
          ---

          <!-- Manual content gets appended below by the workflow -->
          EOF

          # Append manual navigation and content to existing _tabs/manual.md
          cat >> _tabs/manual.md << 'EOF'

          <!-- Chirpy theme has built-in styling, so we'll use minimal custom CSS -->
          <style>
          .manual-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
          }
          .manual-card {
            border: 1px solid var(--border-color);
            border-radius: 0.5rem;
            padding: 1.5rem;
            background: var(--card-bg);
            transition: all 0.3s ease;
          }
          .manual-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
          }
          .hero-section {
            text-align: center;
            padding: 3rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white !important;
            border-radius: 1rem;
            margin-bottom: 2rem;
          }
          .hero-section h1, .hero-section p {
            color: white !important;
          }
          /* Smooth scrolling for anchor links */
          html {
            scroll-behavior: smooth;
          }
          /* Ensure anchors have proper spacing */
          h2[id], h3[id] {
            scroll-margin-top: 80px;
          }
          /* Style for manual sections */
          .manual-section {
            margin: 2rem 0;
            padding: 1rem;
            border-left: 4px solid var(--link-color);
            background: var(--card-bg);
            border-radius: 0.5rem;
          }

          /* Fix popup centering only for tiny tool icons (anchor wraps tool icon image) */
          /* Target by anchor href path used for tool icons; no :has to avoid layout thrash */
          main p > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"],
          .post-content p > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"],
          .page__content p > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"] {
            position: relative !important;
            transform: none !important;
            left: auto !important;
            right: auto !important;
            transition: none !important;
          }
          /* Also cover table/list contexts if any such anchors appear */
          .post-content li > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"],
          .page__content li > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"],
          .post-content td > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"],
          .page__content td > a.popup:not(.normal):not(.left):not(.right)[href*="/assets/manual/tools/"] {
            position: relative !important;
            transform: none !important;
            left: auto !important;
            right: auto !important;
            transition: none !important;
          }

          /* Fix manual table layout and text wrapping with higher specificity */
          main .post-content .table-wrapper > table thead th,
          main .post-content .table-wrapper > table tbody tr td,
          main .page__content .table-wrapper > table thead th,
          main .page__content .table-wrapper > table tbody tr td,
          .post-content .table-wrapper > table thead th,
          .post-content .table-wrapper > table tbody tr td,
          .page__content .table-wrapper > table thead th,
          .page__content .table-wrapper > table tbody tr td {
            white-space: pre-line !important;
          }

          main .post-content img,
          main .page__content img,
          .post-content img,
          .page__content img {
            max-width: none !important;
          }
          </style>

          <div id="manual-top" class="hero-section">
            <h1>🎵 MidiEditor Manual</h1>
            <p>Your complete guide to creating and editing MIDI files</p>
          </div>

          <div class="manual-grid">
            <div class="manual-card">
              <h3>🚀 Getting Started</h3>
              <ul>
                <li><a href="#introduction">👋 Introduction</a></li>
                <li><a href="#setup">⚙️ Setup & Installation</a></li>
                <li><a href="#editor-and-components">🖥️ Interface Overview</a></li>
              </ul>
            </div>

            <div class="manual-card">
              <h3>🎼 MIDI Fundamentals</h3>
              <ul>
                <li><a href="#midi-overview">📚 MIDI Overview</a></li>
                <li><a href="#editing-midi-files">✏️ Editing MIDI Files</a></li>
                <li><a href="#playback">▶️ Playback Features</a></li>
                <li><a href="#record">🎤 Recording MIDI</a></li>
              </ul>
            </div>

            <div class="manual-card">
              <h3>📋 Menu Reference</h3>
              <ul>
                <li><a href="#menu-file">📁 File Menu</a></li>
                <li><a href="#menu-edit">✂️ Edit Menu</a></li>
                <li><a href="#menu-view">👁️ View Menu</a></li>
                <li><a href="#menu-midi">🎹 MIDI Menu</a></li>
              </ul>
            </div>

            <div class="manual-card">
              <h3>🔧 Advanced Features</h3>
              <ul>
                <li><a href="#menu-playback">🎵 Playback Controls</a></li>
                <li><a href="#menu-tools">🛠️ Tools Menu</a></li>
              </ul>
            </div>
          </div>

          ---

          <div style="text-align: center; margin-top: 40px; padding: 20px; border-radius: 8px;">
            <p><strong>💡 Tip:</strong> Click on any section above to jump to that part of the manual!</p>
          </div>


          EOF

          # Embed manual content directly below Manual tab using anchors
          echo "🔧 Embedding manual content directly into Manual tab..."
          echo "📁 Checking manual directory..."
          ls -la manual/ || echo "❌ Manual directory not found"
          echo "📄 Manual files found:"
          ls -la manual/*.html || echo "❌ No HTML files in manual directory"
          {
            printf "\n---\n\n## 📖 Introduction {#introduction}\n\n";
            cat manual/introduction.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g';
            printf "\n---\n\n## 🎼 MIDI Overview {#midi-overview}\n\n";
            cat manual/midi-overview.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g';
            printf "\n---\n\n## 🖥️ The Editor and its Components {#editor-and-components}\n\n";
            cat manual/editor-and-components.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g';
            printf "\n---\n\n## ⚙️ Setting up MidiEditor {#setup}\n\n";
            cat manual/setup.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g';
            printf "\n---\n\n## ✏️ Editing MIDI Files {#editing-midi-files}\n\n";
            cat manual/editing-midi-files.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
            printf "\n---\n\n## ▶️ Playback {#playback}\n\n";
            cat manual/playback.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g';
            printf "\n---\n\n## 🎤 Recording MIDI Data {#record}\n\n";
            cat manual/record.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g';
            printf "\n---\n\n## 📁 File Menu {#menu-file}\n\n";
            cat manual/menu-file.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
            printf "\n---\n\n## ✂️ Edit Menu {#menu-edit}\n\n";
            cat manual/menu-edit.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
            printf "\n---\n\n## 👁️ View Menu {#menu-view}\n\n";
            cat manual/menu-view.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
            printf "\n---\n\n## 🎹 MIDI Menu {#menu-midi}\n\n";
            cat manual/menu-midi.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
            printf "\n---\n\n## 🎵 Playback Menu {#menu-playback}\n\n";
            cat manual/menu-playback.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
            printf "\n---\n\n## 🛠️ Tools Menu {#menu-tools}\n\n";
            cat manual/menu-tools.html | sed -E 's|href="([^"#]+)\.html#([^"]+)"|href="#\2"|g' | sed -E 's|href="([^"#]+)\.html"|href="#\1"|g' | sed -E 's|href=#([^>]+)>|href="#\1">|g' | sed -E 's|src="screenshots/|src="/assets/manual/screenshots/|g' | sed -E 's|src="tools/|src="/assets/manual/tools/|g' | sed -E 's|src="midieditor\.png"|src="/assets/manual/midieditor.png"|g' | sed -E 's|<th>|<th style="white-space: pre-line;">|g' | sed -E 's|<td>|<td style="white-space: pre-line;">|g' | sed -E 's|<img src="/assets/manual/tools/|<img style="max-width:none;" src="/assets/manual/tools/|g';
          } >> _tabs/manual.md

          echo "✅ Manual content embedded into Manual tab"

          echo "📝 Manual tab file size:"
          wc -l _tabs/manual.md

          # Optionally also create individual manual section pages (kept for direct links)
          echo "📚 Creating individual manual section pages..."
          if [ -d "manual" ]; then
            echo "📁 Found manual directory, listing files:"
            ls -la manual/
            for html_file in manual/*.html; do
              if [ -f "$html_file" ] && [ "$(basename "$html_file")" != "index.html" ]; then
                filename=$(basename "$html_file" .html)
                title=$(echo "$filename" | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
                echo "Creating manual section: $filename -> $title"

                # Create individual page for each manual section
                cat > "${filename}.md" << EOF
          ---
          layout: page
          title: $title
          permalink: /manual/${filename}/
          ---

          <div style="margin-bottom: 20px; padding: 10px; background: var(--card-bg); border-radius: 5px;">
            <a href="/manual/" style="color: var(--link-color); text-decoration: none;">← Back to Manual Index</a>
          </div>

          EOF

                # Add the HTML content directly with debugging
                echo "Processing file: $html_file"
                if [ -f "$html_file" ]; then
                  cat "$html_file" >> "${filename}.md"
                  echo "✅ Added content from $html_file to ${filename}.md"
                else
                  echo "❌ File $html_file not found"
                  echo "<p>Error: Manual content not found for $filename</p>" >> "${filename}.md"
                fi
              fi
            done
            echo "✅ Individual manual section pages created"

            # List created files for debugging
            echo "📄 Created manual files:"
            ls -la *.md | grep -E "(introduction|setup|editor|midi|editing|playback|record|menu)" || echo "No manual .md files found"
          else
            echo "❌ Manual directory not found"
          fi

          echo "✅ Jekyll site files generated (temporary)"

      - name: Setup Ruby (after Gemfile creation)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 'head'
          bundler-cache: true

      - name: Copy assets and verify icon fix
        run: |
          # Copy icon to root for proper linking
          if [ -f "run_environment/midieditor.ico" ]; then
            cp run_environment/midieditor.ico ./midieditor.ico
            echo "✅ Icon copied from run_environment/ to root as midieditor.ico"
            ls -la midieditor.ico
          else
            echo "❌ Icon not found at run_environment/midieditor.ico"
            ls -la run_environment/ || echo "run_environment directory not found"
          fi

          # Copy manual assets (screenshots, tools icons, images)
          mkdir -p assets/manual/
          if [ -d "manual/screenshots" ]; then
            cp -r manual/screenshots assets/manual/
            echo "✅ Manual screenshots copied"
          fi
          if [ -d "manual/tools" ]; then
            cp -r manual/tools assets/manual/
            echo "✅ Manual tool icons copied"
          fi
          if [ -f "manual/midieditor.png" ]; then
            cp manual/midieditor.png assets/manual/
            echo "✅ Manual midieditor.png copied"
          fi

          # Verify the icon is present for avatar and About tab exists
          if [ -f "midieditor.ico" ]; then
            echo "✅ midieditor.ico exists at site root"
          else
            echo "❌ midieditor.ico missing at site root"
          fi
          if [ -f "index.md" ]; then
            echo "✅ Homepage (Home tab) created"
          fi
          if [ -f "_tabs/manual.md" ]; then
            echo "✅ Manual tab created"
          fi

          # Debug: Check what tabs exist
          echo "📁 Tabs directory contents:"
          ls -la _tabs/ || echo "No _tabs directory found"

          # Debug: Check if icon will be included in Jekyll build
          echo "📁 Files in root directory:"
          ls -la *.ico || echo "No .ico files found in root"

      - name: Verify Jekyll installation
        run: |
          # Bundler cache should have installed everything
          echo "✅ Jekyll and dependencies installed via bundler-cache"

          # Show versions for debugging
          echo "📦 Installed versions:"
          echo "Ruby: $(ruby --version)"
          echo "Bundler: $(bundle --version)"
          bundle exec jekyll --version
          echo "Jekyll gems:"
          bundle list | grep jekyll

      - name: Build with Jekyll (manual)
        run: |
          # Build the site with our custom Jekyll setup (suppress warnings)
          bundle exec jekyll build --quiet

          echo "✅ Jekyll site built successfully"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment success
        run: |
          echo "🎉 Fresh deployment completed!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "✨ This is now the only deployment (old ones were cleaned up first)"