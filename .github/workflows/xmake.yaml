name: build with xmake on windows
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-2025
    strategy:
      matrix:
        include:
          - qt_ver: 6.10.0
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            qt_arch_install: msvc2022_64
    steps:
      - uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest

      - name: Install Qt with Source Code (for Qt RHI)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          host: 'windows'
          target: 'desktop'
          cache: 'false'
          modules: 'qtmultimedia'
          # Install only required Qt archives (matching xmake dependencies)
          archives: 'qtbase qtmultimedia'
          # Install source code for private headers (Qt RHI)
          source: 'true'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Setup Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers
          vulkan-use-cache: true

      - name: Verify Vulkan SDK Installation
        shell: pwsh
        run: |
          echo "üîç Verifying Vulkan SDK installation..."
          echo "VULKAN_SDK: $env:VULKAN_SDK"
          echo "VK_SDK_PATH: $env:VK_SDK_PATH"

          if ($env:VULKAN_SDK -and (Test-Path "$env:VULKAN_SDK\Include\vulkan\vulkan.h")) {
            echo "‚úÖ Vulkan SDK headers found at: $env:VULKAN_SDK\Include\vulkan\"
            echo "üì¶ Vulkan SDK version: $(Get-Content "$env:VULKAN_SDK\Include\vulkan\vulkan_core.h" | Select-String "VK_HEADER_VERSION" | Select-Object -First 1)"
            echo "üöÄ Backend hierarchy: D3D12 ‚Üí D3D11 ‚Üí Vulkan ‚Üí OpenGL ‚Üí Software fallback"
          } else {
            echo "‚ùå Vulkan SDK headers not found"
            echo "‚ö†Ô∏è Backend hierarchy: D3D12 ‚Üí D3D11 ‚Üí OpenGL ‚Üí Software fallback"
          }

      - name: Setup MSYS2 and Install QtIFW 4.10.0
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-qt-installer-framework

      - name: Setup QtIFW Path from MSYS2
        shell: msys2 {0}
        run: |
          # Find QtIFW tools in MSYS2 environment and convert path to Windows format
          echo "=== Setting up QtIFW Path ==="

          # Check if tools are installed
          if [ -f "/mingw64/bin/binarycreator.exe" ]; then
            echo "Found QtIFW tools in /mingw64/bin/"
            QTIFW_UNIX_PATH="/mingw64/bin"
            # Convert MSYS2 path to Windows path
            QTIFW_WIN_PATH=$(cygpath -w "$QTIFW_UNIX_PATH")
            echo "MSYS2 path: $QTIFW_UNIX_PATH"
            echo "Windows path: $QTIFW_WIN_PATH"

            # Save to GitHub environment
            echo "QTIFW_PATH=$QTIFW_WIN_PATH" >> $GITHUB_ENV
            echo "QTIFW_UNIX_PATH=$QTIFW_UNIX_PATH" >> $GITHUB_ENV

            # Test the tools work
            echo "=== Testing QtIFW Tools ==="
            echo "Testing binarycreator..."
            "$QTIFW_UNIX_PATH/binarycreator.exe" --help > /dev/null 2>&1 && echo "‚úì binarycreator.exe is working"
            echo "Testing repogen..."
            "$QTIFW_UNIX_PATH/repogen.exe" --help > /dev/null 2>&1 && echo "‚úì repogen.exe is working"
            echo "QtIFW tools verified successfully!"
          else
            echo "ERROR: QtIFW tools not found in expected location!"
            exit 1
          fi

      - name: Clear MSYS2 Environment for Build
        shell: pwsh
        run: |
          # Clear MSYS2 environment variables that interfere with xmake
          echo "Clearing MSYS2 environment variables..."
          echo "MSYSTEM=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Environment cleared for native Windows build"

      - name: Verify Qt RHI Availability
        shell: pwsh
        run: |
          echo "Verifying Qt RHI headers are available..."

          # Get Qt directory from environment variables
          $qtDir = $env:QT_ROOT_DIR
          if (-not $qtDir) {
            $qtDir = $env:Qt6_DIR
          }

          if (-not $qtDir) {
            echo "‚ùå Qt directory not found in environment variables"
            exit 1
          }

          echo "üìÅ Qt directory: $qtDir"

          # Check for Qt RHI headers in multiple locations (private headers with _p.h suffix)
          $possiblePaths = @(
            "$qtDir\include\QtGui\private\rhi\qrhi_p.h",
            "$qtDir\..\Src\qtbase\src\gui\rhi\qrhi_p.h",
            "$qtDir\include\QtGui\6.10.0\QtGui\private\qrhi_p.h"
          )

          echo "üîç Debugging Qt directory structure..."
          echo "Qt directory contents:"
          if (Test-Path "$qtDir\include") {
            Get-ChildItem "$qtDir\include" -Name | ForEach-Object { echo "  include/$_" }
          }
          if (Test-Path "$qtDir\..\Src") {
            echo "Source directory found:"
            Get-ChildItem "$qtDir\..\Src" -Name | ForEach-Object { echo "  Src/$_" }
            if (Test-Path "$qtDir\..\Src\qtbase") {
              echo "qtbase directory found:"
              Get-ChildItem "$qtDir\..\Src\qtbase" -Name | ForEach-Object { echo "  qtbase/$_" }
            }
          }

          $rhiFound = $false
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              echo "‚úÖ Qt RHI headers found at: $path"
              $rhiFound = $true

              # Set source path if found in source directory
              if ($path -like "*\Src\*") {
                $sourcePath = "$qtDir\..\Src\qtbase\src\gui"
                echo "QT_RHI_SOURCE_PATH=$sourcePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                echo "üìÅ Set Qt RHI source path: $sourcePath"
                echo "üìÅ RHI headers will be available at: $sourcePath\rhi\"
              }
              break
            }
          }

          if (-not $rhiFound) {
            echo "‚ùå Qt RHI headers not found! Build requires Qt RHI for hardware acceleration."
            echo "Searched paths:"
            foreach ($path in $possiblePaths) {
              echo "  - $path"
            }
            exit 1
          }

      - name: Build with Qt RHI
        run: |
          echo "Building with Qt RHI hardware acceleration..."
          echo "üîç Environment variables:"
          echo "QT_ROOT_DIR: $env:QT_ROOT_DIR"
          echo "Qt6_DIR: $env:Qt6_DIR"
          echo "QT_RHI_SOURCE_PATH: $env:QT_RHI_SOURCE_PATH"

          echo "üîß Configuring xmake..."
          xmake config --yes --arch=x64 --toolchain=msvc --mode=release

          echo "üî® Building..."
          xmake build --jobs=2

      - name: Copy Files
        shell: pwsh
        run: |
          mkdir ./packaging/org.midieditor.midieditor/data/
          cp ./bin/MidiEditor.exe ./packaging/org.midieditor.midieditor/data/MidiEditor.exe
          windeployqt ./packaging/org.midieditor.midieditor/data/MidiEditor.exe
          mkdir ./packaging/org.midieditor.midieditor/data/metronome
          cp ./run_environment/metronome/metronome-01.wav ./packaging/org.midieditor.midieditor/data/metronome
          mkdir ./packaging/org.midieditor.manual/data/
          cp -Recurse -Path ./manual/ -Destination ./packaging/org.midieditor.manual/data/

      - name: Packaging
        shell: pwsh
        run: |
          # Use the QtIFW path found in previous step
          $binaryCreator = "$env:QTIFW_PATH\binarycreator.exe"
          echo "Using binarycreator at: $binaryCreator"
          & $binaryCreator --offline-only -c .\scripts\packaging\windows\config.xml -p .\packaging Install.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MidiEditor-Installer
          path: Install.exe
