name: build with qmake on windows
on:
#  push:
#    branches: [ main ]
#    paths-ignore:
#      - '.github/workflows/deploy-pages.yml'
#      - 'README.md'
#      - 'manual/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2025
    if: always() && !cancelled() && !failure()
    env:
      MIDIEDITOR_RELEASE_VERSION_STRING: "\"continuous integration triggered by ${{ github.sha }}\""
      MIDIEDITOR_RELEASE_DATE: ""
    strategy:
      matrix:
        include:
          - qt_ver: 6.10.0
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            qt_arch_install: msvc2022_64
    steps:
      - name: Install Qt with Source Code (for Qt RHI)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          host: 'windows'
          target: 'desktop'
          cache: 'false'
          modules: 'qtmultimedia'
          archives: 'qtbase qtmultimedia qtopengl'

      - name: Setup MSYS2 and Install QtIFW 4.10.0
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-qt-installer-framework

      - name: Setup QtIFW Path from MSYS2
        shell: msys2 {0}
        run: |
          # Find QtIFW tools in MSYS2 environment and convert path to Windows format
          echo "=== Setting up QtIFW Path ==="

          # Check if tools are installed
          if [ -f "/mingw64/bin/binarycreator.exe" ]; then
            echo "Found QtIFW tools in /mingw64/bin/"
            QTIFW_UNIX_PATH="/mingw64/bin"
            # Convert MSYS2 path to Windows path
            QTIFW_WIN_PATH=$(cygpath -w "$QTIFW_UNIX_PATH")
            echo "MSYS2 path: $QTIFW_UNIX_PATH"
            echo "Windows path: $QTIFW_WIN_PATH"

            # Save to GitHub environment
            echo "QTIFW_PATH=$QTIFW_WIN_PATH" >> $GITHUB_ENV
            echo "QTIFW_UNIX_PATH=$QTIFW_UNIX_PATH" >> $GITHUB_ENV

            # Test the tools work
            echo "=== Testing QtIFW Tools ==="
            echo "Testing binarycreator..."
            "$QTIFW_UNIX_PATH/binarycreator.exe" --help > /dev/null 2>&1 && echo "âœ“ binarycreator.exe is working"
            echo "Testing repogen..."
            "$QTIFW_UNIX_PATH/repogen.exe" --help > /dev/null 2>&1 && echo "âœ“ repogen.exe is working"
            echo "QtIFW tools verified successfully!"
          else
            echo "ERROR: QtIFW tools not found in expected location!"
            exit 1
          fi

      - name: Clear MSYS2 Environment for Build
        shell: pwsh
        run: |
          # Clear MSYS2 environment variables that interfere with xmake
          echo "Clearing MSYS2 environment variables..."
          echo "MSYSTEM=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Environment cleared for native Windows build"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true
          
      - name: MSVC Build
        id: build
        shell: cmd
        run: |
          set MIDIEDITOR_RELEASE_DATE="%DATE%"
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          echo ðŸ”§ Running qmake for optimized release build...
          qmake CONFIG+=release
          echo ðŸ”¨ Building with nmake and performance optimizations...
          nmake

      - name: Copy Files
        shell: pwsh
        run: |
          mkdir ./packaging/org.midieditor.midieditor/data/
          cp ./bin/MidiEditor.exe ./packaging/org.midieditor.midieditor/data/MidiEditor.exe
          windeployqt ./packaging/org.midieditor.midieditor/data/MidiEditor.exe
          mkdir ./packaging/org.midieditor.midieditor/data/metronome
          cp ./run_environment/metronome/metronome-01.wav ./packaging/org.midieditor.midieditor/data/metronome
          mkdir ./packaging/org.midieditor.manual/data/
          cp -Recurse -Path ./manual/ -Destination ./packaging/org.midieditor.manual/data/

      - name: Packaging
        shell: pwsh
        run: |
          # Use the QtIFW path found in previous step
          $binaryCreator = "$env:QTIFW_PATH\binarycreator.exe"
          echo "Using binarycreator at: $binaryCreator"
          & $binaryCreator --offline-only -c .\scripts\packaging\windows\config.xml -p .\packaging Install.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: midieditor-qmake-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
          path: Install.exe
