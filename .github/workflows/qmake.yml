name: build with qmake on windows
on:
#  push:
#    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_shader_recompile:
        description: 'Force shader recompilation even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  check-shader-changes:
    runs-on: ubuntu-latest
    outputs:
      shaders-changed: ${{ steps.changes.outputs.shaders }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for shader changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{ github.ref }}
          filters: |
            shaders:
              - 'src/shaders/*.vert'
              - 'src/shaders/*.frag'

      - name: Report shader status
        run: |
          if [[ "${{ steps.changes.outputs.shaders }}" == "true" ]] || [[ "${{ github.event.inputs.force_shader_recompile }}" == "true" ]]; then
            echo "üîÑ Shader source files changed or forced recompilation - will recompile shaders before building"
          else
            echo "‚ö° No shader changes - will proceed directly to build"
          fi

  compile-shaders:
    needs: check-shader-changes
    runs-on: windows-2025
    if: needs.check-shader-changes.outputs.shaders-changed == 'true' || github.event.inputs.force_shader_recompile == 'true'
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - qt_ver: 6.10.0
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            qt_arch_install: msvc2022_64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true

      - name: Install Qt with shader tools
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          host: 'windows'
          target: 'desktop'
          cache: 'false'
          modules: 'qtshadertools'
          archives: 'qtbase'

      - name: Verify qsb tool
        run: |
          echo "Checking for qsb tool..."
          where qsb
          echo "Qt Shader Baker (qsb) tool available"
        shell: cmd

      - name: Compile shaders with modern targets
        working-directory: src/shaders
        shell: cmd
        run: |
          echo Compiling shaders for Qt 6.x with modern targets...

          REM Create output directory
          if not exist compiled mkdir compiled

          REM Compile all shaders for latest desktop targets only
          REM Using GLSL 460 (OpenGL 4.6) + HLSL 68 (D3D12 Shader Model 6.8)
          for %%f in (*.vert *.frag) do (
            echo Compiling shader: %%f
            echo Checking shader version:
            findstr /c:"#version" "%%f"

            REM Compile Shaders
            echo Running: qsb --glsl 460 --hlsl 68 -o "compiled/%%f.qsb" "%%f"
            qsb --glsl 460 --hlsl 68 -o "compiled/%%f.qsb" "%%f"

            if exist "compiled/%%f.qsb" (
              echo ‚úì Successfully compiled: %%f -^> %%f.qsb
            ) else (
              echo ‚úó Per-target compilation failed, trying SPIR-V only fallback
              echo Running fallback: qsb -o "compiled/%%f.qsb" "%%f"
              qsb -o "compiled/%%f.qsb" "%%f"
              if exist "compiled/%%f.qsb" (
                echo ‚úì SPIR-V fallback successful: %%f
              ) else (
                echo ‚úó All compilation methods failed: %%f
                exit /b 1
              )
            )
          )

      - name: Commit compiled shaders to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          REM Add compiled shaders
          git add src/shaders/compiled/*.qsb

          REM Check if there are changes to commit
          git diff --staged --quiet
          if %ERRORLEVEL% EQU 0 (
            echo No shader changes to commit - compiled shaders are identical
          ) else (
            git commit -m "Auto-compile shaders: Update compiled .qsb files"
            git push
            echo Compiled shaders committed to repository
          )
        shell: cmd

      - name: Create compilation summary
        working-directory: src/shaders
        run: |
          echo "## Shader Compilation Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "| Shader | Status | Size |" >> $env:GITHUB_STEP_SUMMARY
          echo "|--------|--------|------|" >> $env:GITHUB_STEP_SUMMARY

          if (Test-Path "compiled") {
            Get-ChildItem compiled/*.qsb | ForEach-Object {
              $size = [math]::Round($_.Length / 1KB, 1).ToString() + " KB"
              echo "| $($_.Name) | :white_check_mark: Compiled | $size |" >> $env:GITHUB_STEP_SUMMARY
            }
          }

          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "**All shaders compiled successfully with GLSL 460 + HLSL 68!**" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          echo "**Targets:** Windows (D3D12 Shader Model 6.8) + Linux (OpenGL 4.6)" >> $env:GITHUB_STEP_SUMMARY
        shell: powershell

  build:
    needs: [check-shader-changes, compile-shaders]
    runs-on: windows-2025
    if: always() && !cancelled() && !failure()
    env:
      MIDIEDITOR_RELEASE_VERSION_STRING: "\"continuous integration triggered by ${{ github.sha }}\""
      MIDIEDITOR_RELEASE_DATE: ""
    strategy:
      matrix:
        include:
          - qt_ver: 6.10.0
            qt_arch: win64_msvc2022_64
            msvc_arch: x64
            qt_arch_install: msvc2022_64
    steps:
      - name: Install Qt with Source Code (for Qt RHI)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          host: 'windows'
          target: 'desktop'
          cache: 'false'
          modules: 'qtmultimedia'
          # Install only required Qt archives (matching xmake dependencies)
          archives: 'qtbase qtmultimedia'
          # Install source code for private headers (Qt RHI)
          source: 'true'

      - name: Setup Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.1
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers
          vulkan-use-cache: true

      - name: Verify Vulkan SDK Installation
        shell: pwsh
        run: |
          echo "üîç Verifying Vulkan SDK installation..."
          echo "VULKAN_SDK: $env:VULKAN_SDK"
          echo "VK_SDK_PATH: $env:VK_SDK_PATH"

      - name: Setup MSYS2 and Install QtIFW 4.10.0
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-qt-installer-framework

      - name: Setup QtIFW Path from MSYS2
        shell: msys2 {0}
        run: |
          # Find QtIFW tools in MSYS2 environment and convert path to Windows format
          echo "=== Setting up QtIFW Path ==="

          # Check if tools are installed
          if [ -f "/mingw64/bin/binarycreator.exe" ]; then
            echo "Found QtIFW tools in /mingw64/bin/"
            QTIFW_UNIX_PATH="/mingw64/bin"
            # Convert MSYS2 path to Windows path
            QTIFW_WIN_PATH=$(cygpath -w "$QTIFW_UNIX_PATH")
            echo "MSYS2 path: $QTIFW_UNIX_PATH"
            echo "Windows path: $QTIFW_WIN_PATH"

            # Save to GitHub environment
            echo "QTIFW_PATH=$QTIFW_WIN_PATH" >> $GITHUB_ENV
            echo "QTIFW_UNIX_PATH=$QTIFW_UNIX_PATH" >> $GITHUB_ENV

            # Test the tools work
            echo "=== Testing QtIFW Tools ==="
            echo "Testing binarycreator..."
            "$QTIFW_UNIX_PATH/binarycreator.exe" --help > /dev/null 2>&1 && echo "‚úì binarycreator.exe is working"
            echo "Testing repogen..."
            "$QTIFW_UNIX_PATH/repogen.exe" --help > /dev/null 2>&1 && echo "‚úì repogen.exe is working"
            echo "QtIFW tools verified successfully!"
          else
            echo "ERROR: QtIFW tools not found in expected location!"
            exit 1
          fi

      - name: Clear MSYS2 Environment for Build
        shell: pwsh
        run: |
          # Clear MSYS2 environment variables that interfere with xmake
          echo "Clearing MSYS2 environment variables..."
          echo "MSYSTEM=" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "Environment cleared for native Windows build"

      - name: Verify Qt RHI Availability
        shell: pwsh
        run: |
          echo "Verifying Qt RHI headers are available..."

          # Get Qt directory from environment variables
          $qtDir = $env:QT_ROOT_DIR
          if (-not $qtDir) {
            $qtDir = $env:Qt6_DIR
          }

          if (-not $qtDir) {
            echo "‚ùå Qt directory not found in environment variables"
            exit 1
          }

          echo "üìÅ Qt directory: $qtDir"

          # Check for Qt RHI headers in multiple locations (private headers with _p.h suffix)
          $possiblePaths = @(
            "$qtDir\include\QtGui\private\rhi\qrhi_p.h",
            "$qtDir\..\Src\qtbase\src\gui\rhi\qrhi_p.h",
            "$qtDir\include\QtGui\6.10.0\QtGui\private\qrhi_p.h"
          )

          echo "üîç Debugging Qt directory structure..."
          echo "Qt directory contents:"
          if (Test-Path "$qtDir\include") {
            Get-ChildItem "$qtDir\include" -Name | ForEach-Object { echo "  include/$_" }
          }
          if (Test-Path "$qtDir\..\Src") {
            echo "Source directory found:"
            Get-ChildItem "$qtDir\..\Src" -Name | ForEach-Object { echo "  Src/$_" }
            if (Test-Path "$qtDir\..\Src\qtbase") {
              echo "qtbase directory found:"
              Get-ChildItem "$qtDir\..\Src\qtbase" -Name | ForEach-Object { echo "  qtbase/$_" }
            }
          }

          $rhiFound = $false
          foreach ($path in $possiblePaths) {
            if (Test-Path $path) {
              echo "‚úÖ Qt RHI headers found at: $path"
              $rhiFound = $true

              # Set source path if found in source directory
              if ($path -like "*\Src\*") {
                $sourcePath = "$qtDir\..\Src\qtbase\src\gui"
                echo "QT_RHI_SOURCE_PATH=$sourcePath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                echo "üìÅ Set Qt RHI source path: $sourcePath"
                echo "üìÅ RHI headers will be available at: $sourcePath\rhi\"
              }
              break
            }
          }

          if (-not $rhiFound) {
            echo "‚ùå Qt RHI headers not found! Build requires Qt RHI for hardware acceleration."
            echo "Searched paths:"
            foreach ($path in $possiblePaths) {
              echo "  - $path"
            }
            exit 1
          }

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true
          
      - name: msvc-build with Qt RHI
        id: build
        shell: cmd
        run: |
          echo Building with Qt RHI hardware acceleration...
          echo üîç Environment variables:
          echo QT_ROOT_DIR: %QT_ROOT_DIR%
          echo Qt6_DIR: %Qt6_DIR%
          echo QT_RHI_SOURCE_PATH: %QT_RHI_SOURCE_PATH%

          set MIDIEDITOR_RELEASE_DATE="%DATE%"
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}

          echo üîß Running qmake...
          qmake

          echo üî® Building with nmake...
          nmake

      - name: Copy Files
        shell: pwsh
        run: |
          mkdir ./packaging/org.midieditor.midieditor/data/
          cp ./bin/MidiEditor.exe ./packaging/org.midieditor.midieditor/data/MidiEditor.exe
          windeployqt ./packaging/org.midieditor.midieditor/data/MidiEditor.exe
          mkdir ./packaging/org.midieditor.midieditor/data/metronome
          cp ./run_environment/metronome/metronome-01.wav ./packaging/org.midieditor.midieditor/data/metronome
          mkdir ./packaging/org.midieditor.manual/data/
          cp -Recurse -Path ./manual/ -Destination ./packaging/org.midieditor.manual/data/

      - name: Packaging
        shell: pwsh
        run: |
          # Use the QtIFW path found in previous step
          $binaryCreator = "$env:QTIFW_PATH\binarycreator.exe"
          echo "Using binarycreator at: $binaryCreator"
          & $binaryCreator --offline-only -c .\scripts\packaging\windows\config.xml -p .\packaging Install.exe

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: midieditor-qmake-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}
          path: Install.exe
